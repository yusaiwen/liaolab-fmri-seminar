<!-- Title -->
<h1 style="color:#2C3E50;">
  ${topItem.getField("title")} Notes
</h1>

<!-- Meta Data -->
<span>
  <h2 style="color: #1B5E20; background-color:#F1F8E9;">💡 Meta Data</h2>
</span>

<table>
  <!-- Author -->
  <tr>
    <td style="background-color:#dbeedd;">
      <b>👨‍🎓 Author:</b>
      <ul>
      <li>${topItem.getCreators().map((v) => v.firstName + " " + v.lastName).join("</li><li>")}
      </li>
      </ul>
    </td>
  </tr>

  <!-- Publication Date -->
  <tr>
    <td style="background-color:#f3faf4;">
      <b> Publication Date: ${topItem.getField("date")}</b>
    </td>
  </tr> 

  <!-- Journal Division -->
  <tr>
    <td style="background-color:#dbeedd;">
      <b>Journal:</b> ${topItem.getField('publicationTitle')} </b>
      <!-- In zotero7, the tags of Ethereal Style plugin are referenced -->
      ${ (() => {
          let tags = Zotero.ZoteroStyle.data.ztoolkit.ItemTree.fieldHooks.globalCache.getFieldHooks.PublicationTags("", true, true, topItem, undefined);
          const jsonStartIndex = tags.indexOf('{');
          if (jsonStartIndex !== -1) {
              tags = tags.slice(jsonStartIndex);
          }
          let regex = /"(sci|sciif)":"([^"]+)"/g;
          let matches = tags.match(regex);

          <!-- Conditional statement: to prevent errors when unable to find division for dissertations, conference papers, etc. -->
          if (tags) {
              const keyValuePairs = JSON.parse(tags);
              const colors = ["#94635c", "#d0867b", "#dc796a", "#ba8f6c", "#c8825c", "#e78a59", "#e99d22", "#ce9335", "#ff945c"];
              let out = "";

              <!-- The division information uses easyscholar, there's a tutorial in zotero style -->
              for (const key in keyValuePairs) {
                  if (key === "sci") {
                      out += `<span style="background-color: ${colors[0]}; color: #fff; margin-right: 20px; padding:5px;">SCI ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "sciif") {
                      out += `<span style="background-color: ${colors[2]}; color: #fff; margin-right: 20px; padding:5px;">IF ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "ccf") {
                      out += `<span style="background-color: ${colors[4]}; color: #fff; margin-right: 20px; padding:5px;">CCF ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "sciUp") {
                      out += `<span style="background-color: ${colors[6]}; color: #fff; margin-right: 20px; padding:5px;">CAS ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "ssci") {
                      out += `<span style="background-color: ${colors[8]}; color: #fff; margin-right: 20px; padding:5px;">SSCI ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "eii") {
                      out += `<span style="background-color: ${colors[1]}; color: #fff; margin-right: 20px; padding:5px;">${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "pku") {
                      out += `<span style="background-color: ${colors[3]}; color: #fff; margin-right: 20px; padding:5px;">PKU ${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "cssci") {
                      out += `<span style="background-color: ${colors[5]}; color: #fff; margin-right: 20px; padding:5px;">${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "utd24") {
                      out += `<span style="background-color: ${colors[7]}; color: #fff; margin-right: 20px; padding:5px;">${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "ft50") {
                      out += `<span style="background-color: ${colors[0]}; color: #fff; margin-right: 20px; padding:5px;">${keyValuePairs[key]}</span>&nbsp;`;
                  }
                  if (key === "fms") {
                      out += `<span style="background-color: ${colors[2]}; color: #fff; margin-right: 20px; padding:5px;">FMS ${keyValuePairs[key]}</span>&nbsp;`;
                  }
              }
              return out;
          }
      })()}
    </td>
  </tr>


  
  <!-- DOI or URL -->
  <tr>
    <td style="background-color:#f3faf4;">
      ${(() => {
        const doi = topItem.getField("DOI");
        if (doi) {
          return `<b>DOI: </b><a href="https://doi.org/${topItem.getField('DOI')}">${topItem.getField('DOI')}</a>`;
        } else {
          return `<b>URL: </b><a href="${topItem.getField('url')}">${topItem.getField('url')}</a>`;
        }
      })()}
    </td>
  </tr>
  
  <!-- Abstract -->
  <tr>
    <td style="background-color:#dbeedd;">
        <b>Abstract: </b>${topItem.getField('abstractNote')}
    </td>
  </tr>

  <!-- Note Date -->
  <tr>
    <td style="background-color:#f3faf4;">
      <b>📅 Note Date: </b>${new Date().toLocaleString()}
    </td>
  </tr>

</table>

<!-- Main Content -->
</span></h1>\n <h2 style="color:#ba55dc; background-color:  #fff8dc;">📜 Content</h2> <hr/>
<h3>  <span style="color: #e0ffff; background-color:    #66cdaa;">⚙️ Object</span></h3>
<p></p>
<h3>  <span style="color:#808080; background-color:    #dcdcdc;">🔬 Shortcoming</span></h3>
<p></p>
<h3>  <span style="color: #004d99; background-color:    #87cefa;">🔨 How to fix</span></h3>
<p></p>

</span></h1>\n <h2 style="color:#fffaf0; background-color:    #ccccff;">🔁 Procedure</pre></h2> <hr/>
<p></p>

</span></h1>\n <h2 style="color:#fffaf0; background-color:    #ccccff;">💡 Findings</pre></h2> <hr/>
<p></p>

</span></h1>\n <h2 style="color:#ffd700; background-color:    #fffdd0;">✨ Creativity</pre></h2> <hr/>
<p></p>

</span></h1>\n <h2 style="color: #006064; background-color:   #E0F7FA;">🙋‍♀️ Personal Problem</h2> <hr/>
</span></h1>\n <h2 style="color:#FF8C00; background-color:   #FFE7BA;">💭 Thinking</h2> <hr/>
<p></p>
<h3>  <span style="color: #de3163; background-color:    #ffc0cb;">🤔 New Vocabulary</span></h3>
<p></p>


from brainspace.gradient import GradientMaps
import nibabel as nib
import numpy as np
from sklearn.metrics import pairwise_distances
from mapalign import embed
fc = np.load("fc.npy")
# aff = 1 - pairwise_distances(fc, metric = 'cosine', n_jobs=60)
aff= cosine_similarity(fc)
# aff = 1 - np.arccos(aff, aff)/np.pi
emb, res = embed.compute_diffusion_map(aff, alpha = 0.5)

import scipy.io as sio
from brainspace.gradient import GradientMaps
fc = sio.loadmat("dong2020/child.mat")
child = fc.get("child")
child = child.toarray()

from mapalign import embed
from sklearn.metrics import pairwise_distances
aff = 1 - pairwise_distances(child, metric = 'cosine')


emb, res = embed.compute_diffusion_map(aff, alpha = 0.5)


gm = GradientMaps(n_components=10,
                  approach="pca",
                  kernel="normalized_angle")
gm.fit(child,
       sparsity=None)



